#!/usr/bin/env ruby

require 'ap'
require 'colored'
require 'optparse'
require 'facter'

$LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), 'src'))
require 'git-sync'

dry_run = false
@nb_threads = Facter.value('processors')['count']*2

OptionParser.new do |opts|
  opts.banner = "Usage: git-sync [@options] <config.yml>"

  opts.on("-t N", "--threads=N", "Number of tasks that should be run in parallel (default: 2*(nb cpu) (#{@nb_threads}))") do |t|
    @nb_threads = t.to_i
  end

  opts.on("-n", "--dry-run", "Do not perform actual sync") do
    dry_run = true
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse!

config_path = ARGV[0]

if not config_path or not File.exists? config_path
  puts "Config file doesn't exist"
  exit 1
end

puts "Loading config #{config_path} ...".blue
config = GitSync::Config.new
config.load_from_file config_path

sync_queue = Queue.new

@threads = []
@thread_states = []

def print_threads
  STDERR.puts "Thread states:"
  1.upto(@nb_threads) do |n|
    state = @thread_states[n]

    if not state
      STDERR.puts "[#{n}] Inactive"
      next
    end

    duration = Time.now - state[:timestamp]
    STDERR.puts "[#{n}] #{Time.at(duration).utc.strftime "%H:%M:%S"} #{state[:work]}"

    if @threads[n-1]
      STDERR.puts @threads[n-1].backtrace.join("\n")
    else
      STDERR.puts "No stack"
    end
  end
end

# Trap SIGUSR1 to print thread states
Signal.trap("USR1") do
  print_threads
end

Signal.trap("INT") do
  print_threads
  puts "Killed".red
  exit(2)
end

# Creating threads
1.upto(@nb_threads) do |n|
  puts "[#{n}] Creating thread ...".red

  @threads << Thread.new(n) do |id|
    puts "[#{id}] Starting thread ..."

    begin
      while w = sync_queue.pop
        puts "[#{id}] Processing #{w} [start] ..."

        # Save state
        @thread_states[id] = {
            timestamp: Time.now,
            work: w
        }

        # Process
        w.work(sync_queue)
        puts "[#{id}] Processing #{w} [end] ..."

        @thread_states[id] = nil
      end
    rescue Exception => e
      puts e.message
      STDERR.puts e.message
      exit 1
    end

    puts "Exiting thread ...".red
    @thread_states[id] = nil
  end
end

puts "Performing sync ...".blue

# Schedule all sources
config.sources.each do |src|
  src.dry_run = dry_run
  sync_queue << src
end

# Wait for all sources to finish their job
config.sources.each do |src|
  src.wait
end

puts "Success".green
exit(0)
